   DOM manipulation JavaScript

Document Object Model (DOM) 
What is DOM manipulation JavaScript?
DOM manipulation is the interaction of the JavaScript DOM API to modify or change the HTML document. With DOM manipulation, you can create, modify, style, or delete elements without a refresh. It also promotes user interactivity with browsers. You can use different programming languages to manipulate the DOM.
With the HTML DOM, JavaScript can access and change all the elements of an HTML document.
DOM Methods
HTML DOM methods are actions you can perform (like add , accessing or deleting an HTML element). (on HTML Elements).
HTML DOM properties are values (of HTML Elements) that you can set or change (like changing the content of an HTML element).
In the DOM, all HTML elements are defined as objects.
Example:
The following example changes the content (the innerHTML) of the <p> element with id="demo":
<script>
document.getElementById("demo").innerHTML = "Hello World!";
</script>
In the example above, getElementById is a method, while innerHTML is a property.



DOM Document
The HTML DOM document object is the owner of all other objects in your web page.

The HTML DOM Document Object
The document object represents your web page.
If you want to access any element in an HTML page, you always start with accessing the document object.
Below are some examples of how you can use the document object to access and manipulate HTML.

Finding HTML Elements
MethodDescriptiondocument.getElementById(id)Find an element by element iddocument.getElementsByTagName(name)Find elements by tag namedocument.getElementsByClassName(name)Find elements by class name
Changing HTML Elements
PropertyDescriptionelement.innerHTML =  new html contentChange the inner HTML of an elementelement.attribute = new valueChange the attribute value of an HTML elementelement.style.property = new styleChange the style of an HTML elementMethodDescriptionelement.setAttribute(attribute, value)Change the attribute value of an HTML element
Adding and Deleting Elements
MethodDescriptiondocument.createElement(element)Create an HTML elementdocument.removeChild(element)Remove an HTML elementdocument.appendChild(element)Add an HTML elementdocument.replaceChild(new, old)Replace an HTML elementdocument.write(text)Write into the HTML output streamAdding Events Handlers
MethodDescriptiondocument.getElementById(id).onclick = function(){code}Adding event handler code to an onclick event

DOM Elements
This page teaches you how to find and access HTML elements in an HTML page.

Finding HTML Elements
Often, with JavaScript, you want to manipulate HTML elements.
To do so, you have to find the elements first. There are several ways to do this:
* Finding HTML elements by id
* Finding HTML elements by tag name
* Finding HTML elements by class name
* Finding HTML elements by CSS selectors
* Finding HTML elements by HTML object collection
Finding HTML Element by Id:
This example finds the element with id="intro":
Example
const element = document.getElementById("intro");

Finding HTML Elements by Tag Name
This example finds all <p> elements:
Example
const element = document.getElementsByTagName("p");

Finding HTML Elements by Class Name
If you want to find all HTML elements with the same class name, use getElementsByClassName().
This example returns a list of all elements with class="intro".
Example
const x = document.getElementsByClassName("intro");

for more details please visit : https://www.w3schools.com/js/js_htmldom_elements.asp






JavaScript HTML DOM - Changing HTML
The HTML DOM allows JavaScript to change the content of HTML elements.
Changing HTML Content
The easiest way to modify the content of an HTML element is by using the innerHTML property.
To change the content of an HTML element, use this syntax:
document.getElementById(id).innerHTML = new HTML
This example changes the content of a <p> element:
<html>
<body>

<p id="p1">Hello World!</p>

<script>
document.getElementById("p1").innerHTML = "New text!";
</script>

</body>
</html>
Example explained:
* The HTML document above contains a <p> element with id="p1"
* We use the HTML DOM to get the element with id="p1"

This example changes the content of an <h1> element:
<h1 id="id01">Old Heading</h1>

<script>
const element = document.getElementById("id01");
element.innerHTML = "New Heading";
</script>

Changing the Value of an Attribute
To change the value of an HTML attribute, use this syntax:
document.getElementById(id).attribute = new value
This example changes the value of the src attribute of an <img> element:
<!DOCTYPE html>
<html>
<body>

<img id="myImage" src="smiley.gif">

<script>
document.getElementById("myImage").src = "landscape.jpg";
</script>

</body>
</html>
Try it Yourself »
Example explained:
* The HTML document above contains an <img> element with id="myImage"
* We use the HTML DOM to get the element with id="myImage"
* A JavaScript changes the src attribute of that element from "smiley.gif" to "landscape.jpg"



Dynamic HTML content
JavaScript can create dynamic HTML content:
Getting date and time and putting in the <p> tag using its id
<!DOCTYPE html>
<html>
<body>
<p id="demo"></p>
<script>
document.getElementById("demo").innerHTML = "Date : " + Date(); </script>

</body>
</html>
o/p:
Date : Wed Sep 28 2022 10:34:29 GMT+0530 (India Standard Time)

document.write()
In JavaScript, document.write() can be used to write directly to the HTML output stream:
<!DOCTYPE html>
<html>
<body>
<p>writing to html page using js</p>
<script>
document.write(Date());
document.write("<br> Javascript is fun");
</script>
</body></html>
JavaScript Form Validation
Visit:
https://www.w3schools.com/js/js_validation.asp	


HTML DOM - Changing CSS
The HTML DOM allows JavaScript to change the style of HTML elements.

Changing HTML Style
To change the style of an HTML element, use this syntax:
document.getElementById(id).style.property = new style
The following example changes the style of a <p> element:
<html>
<body>

<p id="p2">Hello World!</p>

<script>
document.getElementById("p2").style.color = "blue";
document.getElementById("p2").style.fontFamily = "Arial";
document.getElementById("p2").style.fontSize = "larger";
</script>

</body>
</html>
Using Events
The HTML DOM allows you to execute code when an event occurs.
Events are generated by the browser when "things happen" to HTML elements:
* An element is clicked on
* The page has loaded
* Input fields are changed
This example changes the style of the HTML element with id="id1", when the user clicks a button:

<!DOCTYPE html>
<html>
<body>
<h1 id="id1">My Heading 1</h1>
<button type="button" 
onclick="document.getElementById('id1').style.color = 'red'">
Click Me!</button>
</body>
</html>

Visit: https://www.w3schools.com/jsref/dom_obj_style.asp

DOM Animation
A Basic Web Page
To demonstrate how to create HTML animations with JavaScript, we will use a simple web page:
<!DOCTYPE html>
<html>
<style>
#container {
  width: 400px;
height: 400px;
  position: relative;
  background: yellow;
}
#animate {
  width: 50px;
  height: 50px;
  position: absolute;
  background-color: red;
}
</style>
<body>
<p><button onclick="myMove()">Click Me</button></p> 
<div id ="container">
  <div id ="animate"></div>
</div>
<script>
function myMove() {
  let id = null;
  const elem = document.getElementById("animate");   
let pos = 0;
  clearInterval(id);
  id = setInterval(frame, 5);
  function frame() {
    if (pos == 350) {
      clearInterval(id);
    } else {
      pos++; 
      elem.style.top = pos + "px"; 
      elem.style.left = pos + "px"; 
    }
  }
}
</script>
</body>
</html>








DOM Events
HTML DOM allows JavaScript to react to HTML events:
Examples of HTML events:
* When a user clicks the mouse
* When a web page has loaded
* When an image has been loaded
* When the mouse moves over an element
* When an input field is changed
* When an HTML form is submitted
* When a user strokes a key
In this example, the content of the <h1> element is changed when a user clicks on it:
Example
<!DOCTYPE html>
<html>
<body>

<h1 onclick="this.innerHTML = 'Ooops!'">Click on this text!</h1>

</body>
</html>
Or 
<h1 onclick="changeText(this)">Click on this text!</h1>

<script>
function changeText(id) {
  id.innerHTML = "Ooops!";
}
</script>

The onchange Event
The onchange event is often used in combination with validation of input fields.
Below is an example of how to use the onchange. The upperCase() function will be called when a user changes the content of an input field.
Example
<input type="text" id="fname" onchange="upperCase()">
<script>
function upperCase() {
  const x = document.getElementById("fname");
  x.value = x.value.toUpperCase();
}
</script>
Visit : https://www.w3schools.com/js/js_htmldom_events.asp








DOM EventListener
       The addEventListener() method
Visit: https://www.w3schools.com/js/js_htmldom_eventlistener.asp
Or youtube
The addEventListener() method attaches an event handler to the specified element.
The addEventListener() method attaches an event handler to an element without overwriting existing event handlers.
You can add many event handlers to one element.
You can add many event handlers of the same type to one element, i.e two "click" events.
You can add event listeners to any DOM object not only HTML elements. i.e the window object.
The addEventListener() method makes it easier to control how the event reacts to bubbling.
When using the addEventListener() method, the JavaScript is separated from the HTML markup, for better readability and allows you to add event listeners even when you do not control the HTML markup.
You can easily remove an event listener by using the removeEventListener() method.
Syntax:
element.addEventListener(event, function, useCapture);
The first parameter is the type of the event (like "click" or "mousedown" or any other HTML DOM Event.) visit : https://www.w3schools.com/jsref/dom_obj_event.asp
The second parameter is the function we want to call when the event occurs.
The third parameter is a boolean value specifying whether to use event bubbling or event capturing. This parameter is optional.

Add an Event Handler to an Element
Example
Alert "Hello World!" when the user clicks on an element:
<!DOCTYPE html>
<html>
<body>
<h2>JavaScript addEventListener()</h2>
<p>This example uses the addEventListener() method to attach a click event to a button.</p>
<button id="myBtn">Try it</button>
<script>
document.getElementById("myBtn").addEventListener("click", function() {
  alert("Hello World!");
});
</script>
</body>
</html>
Or
<button id="myBtn">Try it</button>
<script>
document.getElementById("myBtn").addEventListener("click", myFunction);
function myFunction() {
  alert ("Hello World!");
}
</script>

Add Many Event Handlers to the Same Element
 <!DOCTYPE html>
<html>
<body>
<h2>JavaScript addEventListener()</h2>
<p>This example uses the addEventListener() method to add two click events to the same button.</p>
<button id="myBtn">Try it</button>
<script>
var x = document.getElementById("myBtn");
x.addEventListener("click", myFunction);
x.addEventListener("click", someOtherFunction);
function myFunction() {
  alert ("Hello World!");
}
function someOtherFunction() {
  alert ("This function was also executed!");
}
</script>
</body>
</html>
Visit : https://www.w3schools.com/js/js_htmldom_eventlistener.asp for more details






















